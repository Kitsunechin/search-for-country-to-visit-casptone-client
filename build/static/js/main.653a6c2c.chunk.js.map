{"version":3,"sources":["AppContext.js","config.js","services/token-service.js","NotFoundPage.js","services/auth-api-service.js","LoginPage.js","RegistrationPage.js","Header.js","LandingPage.js","DrawerToggleButton.js","Navigation.js","BucketListPage.js","VisitedPage.js","SideDrawer.js","Backdrop.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","drawerToggleButton","TokenService","saveAuthToken","token","window","sessionStorage","setItem","config","getAuthToken","getItem","clearAuthToken","removeItem","clear","hasAuthToken","makeBasicAuthToken","userName","password","btoa","saveUserId","userId","getUserId","user_id","NotFoundPage","AuthApiService","postLogin","credentials","fetch","method","headers","body","JSON","stringify","then","res","ok","json","e","Promise","reject","catch","err","console","log","postUser","user","LoginPage","props","handleSubmit","preventDefault","data","formData","FormData","target","value","username","validateUsername","setState","error","validatePassword","params","state","user_name","user_password","response","authToken","location","Object","keys","map","key","encodeURIComponent","join","inputUsername","outputUsername","match","inputPassword","outputPassword","errorMessage","this","className","onSubmit","htmlFor","type","name","placeholder","required","Component","RegistrationPage","email","validateEmail","user_email","id","inputEmail","outputEmail","Header","LandingPage","showLoginBox","isLoginOpen","isRegisterOpen","showRegisterBox","onClick","DrawerToggleButton","context","contextType","Navigation","logOutClick","click","to","BucketListPage","selectCountry","countryId","split","countryNicename","newCountry","nicename","Error","populateBucketListCountry","message","dropDownCountries","bucketListCountriesAdded","url","totalItems","showBucketList","length","country","valueOutput","width","height","display","position","bucketListCountriesArray","i","push","listOfCountries","includes","aria-controls","aria-live","VisitedPage","populatevisitedCountry","visitedCountriesAdded","showVisitedList","visitedCountriesArray","SideDrawer","drawerClasses","show","Backdrop","App","sideDrawerOpen","prevState","backdropClickHandler","backdrop","contextValue","Provider","style","exact","path","render","pathname","component","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2ZAMeA,G,MAJIC,IAAMC,cAAe,CACpCC,mBAAoB,gBCHT,EACC,sDADD,EAGF,iCCDPC,EAAe,CACjBC,cADiB,SACHC,GACVC,OAAOC,eAAeC,QAAQC,EAAkBJ,IAEpDK,aAJiB,WAKb,OAAOJ,OAAOC,eAAeI,QAAQF,IAEzCG,eAPiB,WAQbN,OAAOC,eAAeM,WAAWJ,GACjCF,eAAeO,SAEnBC,aAXiB,WAYb,QAASZ,EAAaO,gBAE1BM,mBAdiB,SAcEC,EAAUC,GACzB,OAAOZ,OAAOa,KAAP,UAAeF,EAAf,YAA2BC,KAEtCE,WAjBiB,SAiBNC,GACP,OAAOf,OAAOC,eAAeC,QAAQ,UAAWa,IAEpDC,UApBiB,SAoBPC,GACN,OAAOjB,OAAOC,eAAeI,QAAQ,UAAWY,KAKzCpB,IC1BA,SAASqB,IAChB,OACI,mD,kBCoCGC,EAtCQ,CACrBC,UADqB,SACXC,GACR,OAAOC,MAAM,GAAD,OAAInB,EAAJ,eAAsC,CAC9CoB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,KAGtBO,MAAK,SAAAC,GAAG,OACLA,EAAIC,GAEND,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,SAGrCG,OAAM,SAAAC,GACLC,QAAQC,IAAI,SAAUF,OAG5BG,SAnBqB,SAmBZC,GACP,OAAOlB,MAAM,GAAD,OAAInB,EAAJ,UAAiC,CACzCoB,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUa,KAEtBZ,MAAK,SAAAC,GAAG,OACPA,EAAIC,GAEND,EAAIE,OADJF,EAAIE,OAAOH,MAAK,SAAAI,GAAC,OAAIC,QAAQC,OAAOF,SAGnCG,OAAM,SAAAC,GACLC,QAAQC,IAAI,SAAUF,QC7BTK,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqCRC,aAAe,SAACX,GACdA,EAAEY,iBAEF,IAHoB,EAGdC,EAAO,GAGPC,EAAW,IAAIC,SAASf,EAAEgB,QANZ,cASFF,GATE,IASpB,2BAA4B,CAAC,IAApBG,EAAmB,QACxBJ,EAAKI,EAAM,IAAMA,EAAM,IAVP,8BAYpBZ,QAAQC,IAAIO,GAZQ,IAafK,EAAsBL,EAAtBK,SAAUtC,EAAYiC,EAAZjC,SAEyB,KAApC,EAAKuC,iBAAiBD,IACxB,EAAKE,SAAS,CACVC,MAAO,0BAG2B,KAApC,EAAKC,iBAAiB1C,IACxB,EAAKwC,SAAS,CACVC,MAAO,0BAIb,EAAKD,SAAS,CACVG,OAAQV,IAIZR,QAAQC,IAAI,EAAKkB,MAAMD,QAEvB,EAAKH,SAAS,CAAEC,MAAO,OACvBlC,EAAeC,UAAU,CACvBqC,UAAWP,EACXQ,cAAe9C,IAGhBgB,MAAK,SAAA+B,GACJtB,QAAQC,IAAI,cAAeqB,GAC3BT,EAAW,GACXtC,EAAW,GACXf,EAAaC,cAAc6D,EAASC,WACpC/D,EAAaiB,WAAW6C,EAAS5C,QACjCf,OAAO6D,SAAU,cAElBjC,MAAK,SAAA+B,GACJtB,QAAQC,IAAI,YAAYqB,MAEzBxB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAvFd,EAAKoB,MAAQ,CACXH,MAAO,KACPE,OAAQ,CACNL,SAAU,GACVtC,SAAU,KANG,E,8DAWD2C,GAGhB,OAFmBO,OAAOC,KAAKR,GAC1BS,KAAI,SAAAC,GAAG,gBAAOC,mBAAmBD,GAA1B,YAAkCC,mBAAmBX,EAAOU,QACtDE,KAAK,O,uCAGRC,GACf,IAAIC,EAAiBD,EAMrB,OAHIA,EAAcE,MADD,mBAEbD,EAAiB,IAEdA,I,uCAGQE,GACf,IAAIC,EAAiBD,EAOrB,OAHIA,EAAcD,MADG,4CAEjBE,EAAiB,IAEdA,I,+BA4DP,IAAMC,IAAeC,KAAKlB,MAAMH,OAAQ,uBAAGsB,UAAU,iBAAiBD,KAAKlB,MAAMH,OACjF,OACE,yBAAKsB,UAAU,mBACb,0BAAMA,UAAU,WAAWC,SAAUF,KAAK/B,cACzC8B,EACD,yBAAKE,UAAU,OAEb,yBAAKA,UAAU,eACb,2BAAOE,QAAQ,YAAf,YACA,2BACEC,KAAK,OACLC,KAAK,WACLJ,UAAU,cACVK,YAAY,WACZC,UAAQ,KAGZ,yBAAKN,UAAU,eACb,2BAAOE,QAAQ,YAAf,YACA,2BACEC,KAAK,WACLC,KAAK,WACLJ,UAAU,cACVK,YAAY,WACZC,UAAQ,KAGZ,4BACEH,KAAK,UADP,gB,GA5H2BpF,IAAMwF,WCAxBC,E,kDAEjB,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IA8CRC,aAAe,SAACX,GACdA,EAAEY,iBAEF,IAHoB,EAGdC,EAAO,GAGPC,EAAW,IAAIC,SAASf,EAAEgB,QANZ,cASFF,GATE,IASpB,2BAA4B,CAAC,IAApBG,EAAmB,QACxBJ,EAAKI,EAAM,IAAMA,EAAM,IAVP,8BAYpBZ,QAAQC,IAAIO,GAZQ,IAafK,EAA6BL,EAA7BK,SAAUkC,EAAmBvC,EAAnBuC,MAAOxE,EAAYiC,EAAZjC,SACY,KAA9B,EAAKyE,cAAcD,IACrB,EAAKhC,SAAS,CACVC,MAAO,uBAG2B,KAApC,EAAKF,iBAAiBD,IACxB,EAAKE,SAAS,CACVC,MAAO,0BAG2B,KAApC,EAAKC,iBAAiB1C,IACxB,EAAKwC,SAAS,CACVC,MAAO,0BAIb,EAAKD,SAAS,CACVG,OAAQV,IAGd,EAAKO,SAAS,CAAEC,MAAO,OACvBlC,EAAeoB,SAAS,CACpBkB,UAAWP,EACXoC,WAAYF,EACZ1B,cAAe9C,IAGhBgB,MAAK,SAAA+B,GACFtB,QAAQC,IAAI,QAASqB,GACrB9D,EAAaC,cAAc6D,EAASC,WACpC/D,EAAaiB,WAAW6C,EAAS4B,IACjCvF,OAAO6D,SAAW,cAGrB1B,OAAM,SAAAN,GACH,EAAKuB,SAAS,CAAEC,MAAOxB,EAAIwB,YA9F/B,EAAKG,MAAQ,CACXH,MAAO,KACPE,OAAQ,CACNL,SAAU,GACVkC,MAAO,GACPxE,SAAU,KAPG,E,8DAYD2C,GAGhB,OAFmBO,OAAOC,KAAKR,GAC1BS,KAAI,SAAAC,GAAG,gBAAOC,mBAAmBD,GAA1B,YAAkCC,mBAAmBX,EAAOU,QACtDE,KAAK,O,oCAGXqB,GACZ,IAAIC,EAAcD,EAKlB,OAHIA,EAAWlB,MADE,mDAEbmB,EAAc,IAEXA,I,uCAEQrB,GACf,IAAIC,EAAiBD,EAMrB,OAHIA,EAAcE,MADD,mBAEbD,EAAiB,IAEdA,I,uCAGQE,GACf,IAAIC,EAAiBD,EAOrB,OAHIA,EAAcD,MADG,4CAEjBE,EAAiB,IAEdA,I,+BA2DP,IAAMC,IAAeC,KAAKlB,MAAMH,OAAQ,uBAAGsB,UAAU,iBAAiBD,KAAKlB,MAAMH,OACjF,OACE,yBAAKsB,UAAU,mBAEb,0BAAMA,UAAU,WAAWC,SAAUF,KAAK/B,cACzC8B,EACD,yBAAKE,UAAU,OAEb,yBAAKA,UAAU,eACb,2BAAOE,QAAQ,YAAf,YACA,2BACEC,KAAK,OACLC,KAAK,WACLJ,UAAU,cACVK,YAAY,WACZC,UAAQ,KAIZ,yBAAKN,UAAU,eACb,2BAAOE,QAAQ,SAAf,SACA,2BACAC,KAAK,OACLC,KAAK,QACLJ,UAAU,cACVK,YAAY,QACZC,UAAQ,KAGV,yBAAKN,UAAU,eACb,2BAAOE,QAAQ,YAAf,YACA,2BACEC,KAAK,WACLC,KAAK,WACLJ,UAAU,cACVK,YAAY,WACZC,UAAQ,KAEZ,4BACEH,KAAK,UADP,mB,GA/IkCpF,IAAMwF,WCOrCQ,G,MATA,kBAEP,4BAAQf,UAAU,cACd,yCACA,yBAAKA,UAAU,YAAf,yGACD,kGCFUgB,E,kDAEjB,WAAYjD,GAAQ,IAAD,8BACf,cAAMA,IAOVkD,aAAe,WACX,EAAKxC,SAAS,CAACyC,aAAa,EAAMC,gBAAgB,KATnC,EAYnBC,gBAAkB,WACd,EAAK3C,SAAS,CAAC0C,gBAAgB,EAAMD,aAAa,KAXlD,EAAKrC,MAAQ,CACTqC,aAAa,EACbC,gBAAgB,GAJL,E,qDAiBnB,OACI,yBAAKnB,UAAU,YACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,kBAChB,yBACEA,UAAW,eAAiBD,KAAKlB,MAAMqC,YACrC,sBACA,IACFG,QAAStB,KACRkB,cALH,SAQA,yBACEjB,UAAW,eAAiBD,KAAKlB,MAAMsC,eACrC,sBACA,IACFE,QAAStB,KACRqB,iBALH,aASC,yBAAKpB,UAAU,iBACdD,KAAKlB,MAAMqC,YAAc,kBAAC,EAAD,MAAc,kBAAC,EAAD,Y,GAzCPnG,IAAMwF,W,OCFzCe,G,6KAGE,OACI,4BAAQtB,UAAU,gBAAgBqB,QAAStB,KAAKwB,QAAQtG,oBACpD,yBAAK+E,UAAU,uBACf,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,4B,GAPEjF,IAAMwF,YAAjCe,EACKE,YAAc1G,EAWVwG,QCNTG,G,kNAEFC,YAAc,WACZhE,QAAQC,IAAI,eACZzC,EAAaS,iBACbT,EAAamB,UAAY,SAACuE,KAI1BvF,OAAO6D,SAAS,K,uDAId,OACG,yBAAKc,UAAU,qBACV,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAoB2B,MAAO5B,KAAKwB,QAAQtG,sBAExC,kBAAC,IAAD,CAAM+E,UAAU,WAAU4B,GAAG,KAAI,wBAAI5B,UAAU,QAAd,cAChC9E,EAAaY,eAAiB,yBAAKkE,UAAU,WAAkB,GAC/D9E,EAAaY,eAAiB,yBAAKkE,UAAU,OAC9C,kBAAC,IAAD,CAASA,UAAU,WAAW4B,GAAG,KAAI,qCACrC,kBAAC,IAAD,CAAS5B,UAAU,WAAW4B,GAAG,YAAW,wCAC5C,kBAAC,IAAD,CAAS5B,UAAU,WAAW4B,GAAG,gBAAe,4CAChD,kBAAC,IAAD,CAAS5B,UAAU,WAAW4B,GAAG,IAAIP,QAAStB,KAAK2B,aAAa,yCAC3D,S,GA1BJnB,cAAnBkB,EACKD,YAAc1G,EAiCV2G,Q,QCmNAI,E,kDAvPb,WAAY9D,GAAQ,IAAD,8BACjB,cAAMA,IAiHRC,aAAe,SAACX,GACdA,EAAEY,iBAEF,IAHoB,EAGdC,EAAO,GAGPC,EAAW,IAAIC,SAASf,EAAEgB,QANZ,cASFF,GATE,IASpB,2BAA4B,CAAC,IAApBG,EAAmB,QAC1BJ,EAAKI,EAAM,IAAMA,EAAM,IAVL,8BAYpBZ,QAAQC,IAAIO,GAZQ,IAclB4D,EACE5D,EADF4D,cAEEC,EAAYD,EAAcE,MAAM,KAAK,GACrCC,EAAkBH,EAAcE,MAAM,KAAK,GAC/CtE,QAAQC,IAAIoE,EAAUE,GAEtB,EAAKxD,SAAS,CACZG,OAAQV,IAIVR,QAAQC,IAAI,EAAKkB,MAAMD,QAIrB,IAAMsD,EAAa,CACjBtB,GAAImB,EACJzF,QAASpB,EAAamB,YACtB8F,SAAUF,GAGZvE,QAAQC,IAAIuE,GAIZvF,MAAM,GAAD,OAAInB,EAAJ,gBAAuC,CAC1CoB,OAAQ,OACRE,KAAMC,KAAKC,UAAUkF,GACrBrF,QAAS,CACP,eAAgB,sBAKjBI,MAAK,SAAAC,GACJ,IAAKA,EAAIC,GACP,MAAM,IAAIiF,MAAM,iDAGlB,OAAOlF,EAAIE,UAGZH,MAAK,SAAAiB,GACJ,EAAKmE,4BACL3E,QAAQC,IAAI,EAAKkB,UAElBrB,OAAM,SAAAC,GACL,EAAKgB,SAAS,CACZC,MAAOjB,EAAI6E,cA9KnB,EAAKzD,MAAQ,CACXH,MAAO,KACPE,OAAQ,CACNkD,cAAe,IAEjBS,kBAAmB,GACnBC,yBAA0B,IARX,E,gEAWE,IAAD,OAClBzC,KAAKsC,4BAEL3E,QAAQC,IAAI,4CAEZ,IAAM8E,EAAG,UAAMjH,EAAN,QAGTkC,QAAQC,IAAI8E,GAWZ9F,MAAM8F,EATU,CACd7F,OAAQ,MACRC,QAAS,CACP,cAAiB,GACjB,eAAgB,sBAQjBI,MAAK,SAAAC,GACJ,IAAKA,EAAIC,GACP,MAAM,IAAIiF,MAAM,iDAGlB,OAAOlF,EAAIE,UAGZH,MAAK,SAAAiB,GAKJ,GAFAR,QAAQC,IAAIO,GAEY,IAApBA,EAAKwE,WACP,MAAM,IAAIN,MAAM,iBAElB,EAAK3D,SAAS,CACZ8D,kBAAmBrE,OAGtBV,OAAM,SAAAC,GACL,EAAKgB,SAAS,CACZC,MAAOjB,EAAI6E,e,kDAOU,IAAD,OAEpBG,EAAG,UAAMjH,EAAN,6BAA8CN,EAAamB,aAGpEqB,QAAQC,IAAI8E,GAWZ9F,MAAM8F,EATU,CACd7F,OAAQ,MACRC,QAAS,CACP,cAAiB,GACjB,eAAgB,sBAQjBI,MAAK,SAAAC,GACJ,IAAKA,EAAIC,GACP,MAAM,IAAIiF,MAAM,iDAGlB,OAAOlF,EAAIE,UAGZH,MAAK,SAAAiB,GAKJ,GAFAR,QAAQC,IAAIO,GAEY,IAApBA,EAAKwE,WACP,MAAM,IAAIN,MAAM,iBAElB,EAAK3D,SAAS,CACZ+D,yBAA0BtE,OAG7BV,OAAM,SAAAC,GACL,EAAKgB,SAAS,CACZC,MAAOjB,EAAI6E,e,wCAKD1D,GAGhB,OAFmBO,OAAOC,KAAKR,GAC5BS,KAAI,SAAAC,GAAG,gBAAOC,mBAAmBD,GAA1B,YAAkCC,mBAAmBX,EAAOU,QACpDE,KAAK,O,+BAwEvB,IAAImD,EAAiB,GAC8B,IAA/C5C,KAAKlB,MAAM2D,yBAAyBI,SACtCD,EAAiB5C,KAAKlB,MAAM2D,yBAAyBnD,KAAI,SAACwD,EAASvD,GAE/D,IAAIwD,EAAW,mGAA+FD,EAAQV,SAAvG,oBACf,OACI,yBAAK7C,IAAKA,GACV,4BAAKuD,EAAQV,UACb,kBAAC,IAAD,CAAQM,IAAKK,EACLC,MAAM,OACNC,OAAO,QACPpC,GAAItB,EACJU,UAAU,cACViD,QAAQ,UACRC,SAAS,kBAO3B,IAAMC,EAA2B,GACjC,GAAmD,IAA/CpD,KAAKlB,MAAM2D,yBAAyBI,OACtC,IAAK,IAAIQ,EAAE,EAAEA,EAAErD,KAAKlB,MAAM2D,yBAAyBI,OAAOQ,IACxDD,EAAyBE,KAAKtD,KAAKlB,MAAM2D,yBAAyBY,GAAGjB,UAIzEzE,QAAQC,IAAIwF,GAGZ,IAAIG,EAAkB,GAcvB,OAb4C,IAAxCvD,KAAKlB,MAAM0D,kBAAkBK,SAC9BU,EAAkBvD,KAAKlB,MAAM0D,kBAAkBlD,KAAI,SAACwD,EAASvD,GAE7D,IAAIwD,EAAW,UAAMD,EAAQjC,GAAd,YAAoBiC,EAAQV,UAE3C,IAAIgB,EAAyBI,SAASV,EAAQV,UAE5C,OACE,4BAAQ7C,IAAKA,EAAKc,KAAK,WAAW9B,MAAOwE,GAAcD,EAAQV,cAMrE,yBAAKnC,UAAU,eAEX,0BAAMC,SAAUF,KAAK/B,cACrB,2BAAOkC,QAAQ,aAAf,qBACI,4BAAQE,KAAK,gBAAeQ,GAAG,YAAY4C,gBAAc,cAAclD,UAAQ,GAC3E,4BAAQhC,MAAM,IAAd,QACCgF,GAET,wCAEF,6BAAS1C,GAAG,cAAc6C,YAAU,UAClC,gCACKd,S,GAlPgB5H,IAAMwF,WCwPpBmD,G,wDAtPb,WAAY3F,GAAQ,IAAD,8BACjB,cAAMA,IA6GRC,aAAe,SAACX,GACdA,EAAEY,iBAEF,IAHoB,EAGdC,EAAO,GAGPC,EAAW,IAAIC,SAASf,EAAEgB,QANZ,cASFF,GATE,IASpB,2BAA4B,CAAC,IAApBG,EAAmB,QAC1BJ,EAAKI,EAAM,IAAMA,EAAM,IAVL,8BAYpBZ,QAAQC,IAAIO,GAZQ,IAclB4D,EACE5D,EADF4D,cAGEC,EAAYD,EAAcE,MAAM,KAAK,GACrCC,EAAkBH,EAAcE,MAAM,KAAK,GAC/CtE,QAAQC,IAAIoE,EAAUE,GAGtB,EAAKxD,SAAS,CACZG,OAAQV,IAIVR,QAAQC,IAAI,EAAKkB,MAAMD,QAKvB,IAAMsD,EAAa,CACjBtB,GAAImB,EACJzF,QAASpB,EAAamB,YACtB8F,SAAUF,GAGZvE,QAAQC,IAAIuE,GAIZvF,MAAM,GAAD,OAAInB,EAAJ,YAAmC,CACtCoB,OAAQ,OACRE,KAAMC,KAAKC,UAAUkF,GACrBrF,QAAS,CACP,eAAgB,sBAKjBI,MAAK,SAAAC,GACJ,IAAKA,EAAIC,GACP,MAAM,IAAIiF,MAAM,iDAGlB,OAAOlF,EAAIE,UAGZH,MAAK,SAAAiB,GACJ,EAAKyF,yBACLjG,QAAQC,IAAI,EAAKkB,UAElBrB,OAAM,SAAAC,GACL,EAAKgB,SAAS,CACZC,MAAOjB,EAAI6E,cA7KjB,EAAKzD,MAAQ,CACXH,MAAO,KACPE,OAAQ,CACNkD,cAAe,IAEjBS,kBAAmB,GACnBqB,sBAAuB,IARR,E,gEAYE,IAAD,OAClB7D,KAAK4D,yBACLjG,QAAQC,IAAI,4CACZ,IAAM8E,EAAG,UAAMjH,EAAN,QAGTkC,QAAQC,IAAI8E,GAWZ9F,MAAM8F,EATU,CACd7F,OAAQ,MACRC,QAAS,CACP,cAAiB,GACjB,eAAgB,sBAQjBI,MAAK,SAAAC,GACJ,IAAKA,EAAIC,GACP,MAAM,IAAIiF,MAAM,iDAGlB,OAAOlF,EAAIE,UAGZH,MAAK,SAAAiB,GAKJ,GAFAR,QAAQC,IAAIO,GAEY,IAApBA,EAAKwE,WACP,MAAM,IAAIN,MAAM,iBAElB,EAAK3D,SAAS,CACZ8D,kBAAmBrE,OAGtBV,OAAM,SAAAC,GACL,EAAKgB,SAAS,CACZC,MAAOjB,EAAI6E,e,+CAKO,IAAD,OAEjBG,EAAG,UAAMjH,EAAN,yBAA0CN,EAAamB,aAGhEqB,QAAQC,IAAI8E,GAWZ9F,MAAM8F,EATU,CACd7F,OAAQ,MACRC,QAAS,CACP,cAAiB,GACjB,eAAgB,sBAQjBI,MAAK,SAAAC,GACJ,IAAKA,EAAIC,GACP,MAAM,IAAIiF,MAAM,iDAGlB,OAAOlF,EAAIE,UAGZH,MAAK,SAAAiB,GAKJ,GAFAR,QAAQC,IAAIO,GAEY,IAApBA,EAAKwE,WACP,MAAM,IAAIN,MAAM,iBAElB,EAAK3D,SAAS,CACZmF,sBAAuB1F,OAG1BV,OAAM,SAAAC,GACL,EAAKgB,SAAS,CACZC,MAAOjB,EAAI6E,e,wCAID1D,GAGhB,OAFmBO,OAAOC,KAAKR,GAC5BS,KAAI,SAAAC,GAAG,gBAAOC,mBAAmBD,GAA1B,YAAkCC,mBAAmBX,EAAOU,QACpDE,KAAK,O,+BA0EvB,IAAIqE,EAAkB,GAC0B,IAA5C9D,KAAKlB,MAAM+E,sBAAsBhB,SACnCiB,EAAkB9D,KAAKlB,MAAM+E,sBAAsBvE,KAAI,SAACwD,EAASvD,GAE7D,IAAIwD,EAAW,mGAA+FD,EAAQV,SAAvG,oBACf,OACI,yBAAK7C,IAAKA,GACV,4BAAKuD,EAAQV,UACb,kBAAC,IAAD,CAAQM,IAAKK,EACLC,MAAM,OACNC,OAAO,QACPpC,GAAItB,EACJU,UAAU,cACViD,QAAQ,UACRC,SAAS,kBAO3B,IAAMY,EAAwB,GAC9B,GAAgD,IAA5C/D,KAAKlB,MAAM+E,sBAAsBhB,OACnC,IAAK,IAAIQ,EAAE,EAAEA,EAAErD,KAAKlB,MAAM+E,sBAAsBhB,OAAOQ,IACrDU,EAAsBT,KAAKtD,KAAKlB,MAAM+E,sBAAsBR,GAAGjB,UAInEzE,QAAQC,IAAImG,GAGZ,IAAIR,EAAkB,GAevB,OAd4C,IAAxCvD,KAAKlB,MAAM0D,kBAAkBK,SAC9BU,EAAkBvD,KAAKlB,MAAM0D,kBAAkBlD,KAAI,SAACwD,EAASvD,GAE7D,IAAIwD,EAAW,UAAMD,EAAQjC,GAAd,YAAoBiC,EAAQV,UAE3C,IAAI2B,EAAsBP,SAASV,EAAQV,UAEzC,OACE,4BAAQ7C,IAAKA,EAAKc,KAAK,WAAW9B,MAAOwE,GAAcD,EAAQV,cAOrE,yBAAKnC,UAAU,gBAEX,0BAAMC,SAAUF,KAAK/B,cACrB,2BAAOkC,QAAQ,aAAf,qBACI,4BAAQE,KAAK,gBAAgBoD,gBAAc,cAAc5C,GAAG,YAAYN,UAAQ,GAC5E,4BAAQhC,MAAM,IAAd,QACCgF,GAET,wCAEF,6BAAS1C,GAAG,cAAc6C,YAAU,UAClC,gCACKI,S,GAjPa9I,IAAMwF,YCyBjBwD,G,kNA1BXrC,YAAc,WACVhE,QAAQC,IAAI,eACZzC,EAAaS,iBACbT,EAAamB,UAAY,SAACuE,KAI1BvF,OAAO6D,SAAS,K,uDAGhB,IAAI8E,EAAgB,cAIxB,OAHIjE,KAAKhC,MAAMkG,OACXD,EAAgB,oBAGpB,yBAAKhE,UAAWgE,GACZ,yBAAKhE,UAAU,aACf,kBAAC,IAAD,CAASA,UAAU,WAAW4B,GAAG,KAAI,qCACrC,kBAAC,IAAD,CAAS5B,UAAU,WAAW4B,GAAG,YAAW,wCAC5C,kBAAC,IAAD,CAAS5B,UAAU,WAAW4B,GAAG,gBAAe,4CAChD,kBAAC,IAAD,CAAS5B,UAAU,WAAW4B,GAAG,IAAIP,QAAStB,KAAK2B,aAAa,8C,GArB/CnB,cCEV2D,G,MALE,SAAAnG,GAAK,OAClB,yBAAKiC,UAAU,WAAWqB,QAAWtD,EAAM4D,UCY1BwC,E,4MAEnBtF,MAAQ,CACNuF,gBAAgB,G,EAGlBnJ,mBAAqB,WACnB,EAAKwD,UAAS,SAAC4F,GACb,MAAO,CAACD,gBAAiBC,EAAUD,oB,EAIvCE,qBAAuB,WACrB,EAAK7F,SAAS,CAAC2F,gBAAgB,K,uDAOjC,IAMIG,EANEC,EAAe,CACnBvJ,mBAAoB8E,KAAK9E,oBAW3B,OATAyC,QAAQC,IAAI6G,GAKRzE,KAAKlB,MAAMuF,iBACbG,EAAW,kBAAC,EAAD,CAAU5C,MAAO5B,KAAKuE,wBAIjC,kBAAC,EAAWG,SAAZ,CAAqBnG,MAAOkG,GAC5B,yBAAKE,MAAO,CAAC1B,OAAO,QAAShD,UAAU,OACrC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYiE,KAAMlE,KAAKlB,MAAMuF,iBAC5BG,EACD,0BAAMvE,UAAU,aACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2E,OAAK,EAACC,KAAK,IAAIC,OAAQ,WAC5B,OAAO,kBAAC,EAAD,SAET,kBAAC,IAAD,CAAOD,KAAK,WAAWC,OAAQ,WAC7B,OAAQ3J,EAAaY,eACjB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAU8F,GAAI,CAACkD,SAAU,UAE/B,kBAAC,IAAD,CAAOF,KAAK,eAAeC,OAAQ,WAC/B,OAAQ3J,EAAaY,eACnB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAU8F,GAAI,CAACkD,SAAU,UAZjC,KAeC,kBAAC,IAAD,CAAOC,UAAWxI,Y,GAtDMxB,IAAMwF,WCLnByE,QACW,cAA7B3J,OAAO6D,SAAS+F,UAEe,UAA7B5J,OAAO6D,SAAS+F,UAEhB5J,OAAO6D,SAAS+F,SAAStF,MACvB,2DCXNuF,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,IAAD,KACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvI,MAAK,SAAAwI,GACJA,EAAaC,gBAEdlI,OAAM,SAAAkB,GACLhB,QAAQgB,MAAMA,EAAM4D,c","file":"static/js/main.653a6c2c.chunk.js","sourcesContent":["import React from 'react';\n\nconst AppContext = React.createContext ({\n    drawerToggleButton: () =>{},\n})\n\nexport default AppContext;","export default {\n  API_ENDPOINT: 'https://country-search-server-app.herokuapp.com/api',\n  // API_ENDPOINT: 'http://localhost:8000/api',\n  TOKEN_KEY: 'country-search-capstone-server',\n  }","import config from '../config'\n\nconst TokenService = {\n    saveAuthToken(token) {\n        window.sessionStorage.setItem(config.TOKEN_KEY, token)\n    },\n    getAuthToken() {\n        return window.sessionStorage.getItem(config.TOKEN_KEY)\n    },\n    clearAuthToken() {\n        window.sessionStorage.removeItem(config.TOKEN_KEY)\n        sessionStorage.clear();\n    },\n    hasAuthToken() {\n        return !!TokenService.getAuthToken()\n    },\n    makeBasicAuthToken(userName, password) {\n        return window.btoa(`${userName}:${password}`)\n    },\n    saveUserId(userId) {\n        return window.sessionStorage.setItem('user_id', userId);\n    },\n    getUserId(user_id) {\n        return window.sessionStorage.getItem('user_id', user_id)\n    }\n\n}\n\nexport default TokenService","import React from 'react'\n\nexport default function NotFoundPage() {\n        return(\n            <div>\n                404 Page not Found\n            </div>\n        )\n}","import config from '../config'\n\nconst AuthApiService = {\n  postLogin(credentials) {\n    return fetch(`${config.API_ENDPOINT}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(credentials),\n\n      })\n      .then(res =>\n        (!res.ok) ?\n        res.json().then(e => Promise.reject(e)) :\n        res.json()\n      )\n      .catch(err => {\n        console.log('error:', err)\n      })\n  },\n  postUser(user) {\n    return fetch(`${config.API_ENDPOINT}/users`, {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n        },\n        body: JSON.stringify(user),\n      })\n      .then(res =>\n      (!res.ok) ?\n      res.json().then(e => Promise.reject(e)) :\n      res.json()\n      )\n      .catch(err => {\n        console.log('error:', err)\n      })\n  },\n}\n\nexport default AuthApiService","import React from 'react'\n\nimport TokenService from './services/token-service';\nimport AuthApiService from './services/auth-api-service';\n\nimport './LandingPage.css'\nexport default class LoginPage extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        params: {\n          username: '',\n          password: ''\n        }\n      };\n    }\n\n    formatQueryParams(params) {\n      const queryItems = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      return queryItems.join('&')\n    }\n\n    validateUsername(inputUsername){\n      let outputUsername = inputUsername;\n      // only lowercase and uppercase letters and dash\n      let userformat = /^[a-zA-Z\\-]+$/;\n      if(!inputUsername.match(userformat)) {\n          outputUsername = \"\"\n      }\n      return outputUsername\n    }\n\n    validatePassword(inputPassword){\n      let outputPassword = inputPassword;\n      // at least one number, one lowercase and one uppercase letter\n      // at least eight characters that are letters, numbers or the underscore\n      let passwordformat = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])\\w{8,}$/;\n      if(!inputPassword.match(passwordformat)) {\n          outputPassword = \"\"\n      }\n      return outputPassword\n    }\n  \n    handleSubmit = (e) => {\n      e.preventDefault();\n      //create an object to store the search filters\n      const data = {}\n\n      //get all the from data from the form component\n      const formData = new FormData(e.target)\n\n      //for each of the keys in form data populate it with form value\n      for (let value of formData) {\n          data[value[0]] = value[1]\n      }\n      console.log(data)\n      let {username, password} = data\n    \n      if (this.validateUsername(username) === '') {\n        this.setState({\n            error: 'username is not valid'\n        })\n      }\n      if (this.validatePassword(password) === '') {\n        this.setState({\n            error: 'password is not valid'\n        })\n      }\n      //assigning the object from the form data to params in the state\n      this.setState({\n          params: data\n      })\n\n      //check if the state is populated with the search params data\n      console.log(this.state.params)\n\n      this.setState({ error: null })\n      AuthApiService.postLogin({\n        user_name: username,\n        user_password: password,\n      })\n  \n      .then(response => {\n        console.log(\"response ID\", response)\n        username = ''\n        password = ''\n        TokenService.saveAuthToken(response.authToken)\n        TokenService.saveUserId(response.userId)\n        window.location ='/visited'\n      })\n      .then(response => {\n        console.log(\"response:\",response)\n      })\n      .catch(err => {\n        console.log(err);\n      });   \n     \n    }\n  \n    render() {\n      const errorMessage = this.state.error ? <p className=\"error-message\">{this.state.error}</p> : false\n      return (\n        <div className=\"inner-container\">\n          <form className=\"add-user\" onSubmit={this.handleSubmit}>\n          {errorMessage}\n          <div className=\"box\">\n          {/* {TokenService.getUserId()} */}\n            <div className=\"input-group\">\n              <label htmlFor=\"username\">Username</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                className=\"login-input\"\n                placeholder=\"Username\"\n                required/>\n            </div>\n  \n            <div className=\"input-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"login-input\"\n                placeholder=\"Password\"\n                required/>\n            </div>\n  \n            <button\n              type=\"submit\"\n              >Login</button>\n          \n          </div>\n          </form>\n        </div>\n      );\n    }\n  \n  }","import React from 'react'\n\nimport AuthApiService from './services/auth-api-service';\nimport TokenService from './services/token-service.js';\n\nimport './LandingPage.css'\nexport default class RegistrationPage extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        params: {\n          username: '',\n          email: '',\n          password: ''\n        }\n      };\n    }\n\n    formatQueryParams(params) {\n      const queryItems = Object.keys(params)\n          .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n      return queryItems.join('&')\n  }\n    \n    validateEmail(inputEmail){\n      let outputEmail = inputEmail;\n      let mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n      if(!inputEmail.match(mailformat)) {\n          outputEmail = \"\"\n      }\n      return outputEmail\n    }\n    validateUsername(inputUsername){\n      let outputUsername = inputUsername;\n      // only lowercase and uppercase letters and dash\n      let userformat = /^[a-zA-Z\\-]+$/;\n      if(!inputUsername.match(userformat)) {\n          outputUsername = \"\"\n      }\n      return outputUsername\n    }\n\n    validatePassword(inputPassword){\n      let outputPassword = inputPassword;\n      // at least one number, one lowercase and one uppercase letter\n      // at least eight characters that are letters, numbers or the underscore\n      let passwordformat = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])\\w{8,}$/;\n      if(!inputPassword.match(passwordformat)) {\n          outputPassword = \"\"\n      }\n      return outputPassword\n    }\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n      //create an object to store the search filters\n      const data = {}\n\n      //get all the from data from the form component\n      const formData = new FormData(e.target)\n\n      //for each of the keys in form data populate it with form value\n      for (let value of formData) {\n          data[value[0]] = value[1]\n      }\n      console.log(data)\n      let {username, email, password} = data\n      if (this.validateEmail(email) === '') {\n        this.setState({\n            error: 'email is not valid'\n        })\n      }\n      if (this.validateUsername(username) === '') {\n        this.setState({\n            error: 'username is not valid'\n        })\n      }\n      if (this.validatePassword(password) === '') {\n        this.setState({\n            error: 'password is not valid'\n        })\n      }\n      //assigning the object from the form data to params in the state\n      this.setState({\n          params: data\n      })\n\n    this.setState({ error: null })\n    AuthApiService.postUser({\n        user_name: username,\n        user_email: email,\n        user_password: password,\n    })\n\n      .then(response => {\n          console.log('user:', response)\n          TokenService.saveAuthToken(response.authToken)\n          TokenService.saveUserId(response.id)\n          window.location = '/visited'\n      }) \n\n      .catch(res => {\n          this.setState({ error: res.error })\n      })  \n\n    }\n  \n    render() {\n      //if there is an error message display it\n      const errorMessage = this.state.error ? <p className=\"error-message\">{this.state.error}</p> : false\n      return (\n        <div className=\"inner-container\">\n          {/* {TokenService.getUserId()}  */}\n          <form className=\"add-user\" onSubmit={this.handleSubmit}>\n          {errorMessage}\n          <div className=\"box\">\n  \n            <div className=\"input-group\">\n              <label htmlFor=\"username\">Username</label>\n              <input\n                type=\"text\"\n                name=\"username\"\n                className=\"login-input\"\n                placeholder=\"Username\"\n                required/>\n               \n            </div>\n  \n            <div className=\"input-group\">\n              <label htmlFor=\"email\">Email</label>\n              <input \n              type=\"text\" \n              name=\"email\" \n              className=\"login-input\" \n              placeholder=\"Email\"\n              required/>\n            </div>\n  \n            <div className=\"input-group\">\n              <label htmlFor=\"password\">Password</label>\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"login-input\"\n                placeholder=\"Password\"\n                required/>\n            </div>\n            <button\n              type=\"submit\"\n              >Register</button>\n          </div>\n          </form>\n        </div>\n      );\n    }\n  }","import React from 'react'\nimport './Header.css'\nimport {Link} from 'react-router-dom';\n\nconst Header = () => \n    (\n        <header className=\"App-header\">\n            <h1>Trippster</h1>\n            <div className='subtitle'>With Trippster you can plan your future travells and keep track of the places you have already visited\n           <span> Login or Register and start planning your next destination!</span>\n           </div>\n        </header>\n    )\nexport default Header","import React from 'react'\n\nimport './LandingPage.css'\nimport LoginPage from './LoginPage';\nimport RegistrationPage from './RegistrationPage';\nimport Header from './Header';\n\nexport default class LandingPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoginOpen: false,\n            isRegisterOpen: false\n        }\n    }\n\n    showLoginBox = () => {\n        this.setState({isLoginOpen: true, isRegisterOpen: false});\n    }\n    \n    showRegisterBox = () => {\n        this.setState({isRegisterOpen: true, isLoginOpen: false});\n    }\n\n    render(){\n    return(\n        <div className=\"main-box\">\n        <Header/>\n        <div className=\"box-controller\">\n       <div\n         className={\"controller \" + (this.state.isLoginOpen\n         ? \"selected-controller\"\n         : \"\")}\n         onClick={this\n         .showLoginBox}>\n         Login\n       </div>\n       <div\n         className={\"controller \" + (this.state.isRegisterOpen\n         ? \"selected-controller\"\n         : \"\")}\n         onClick={this\n         .showRegisterBox}>\n         Register\n       </div>\n     </div>\n        <div className=\"box-container\">\n        {this.state.isLoginOpen ? <LoginPage/>: <RegistrationPage/>}\n       </div>\n       </div>\n    ) \n}\n}","import React from 'react'\nimport AppContext from './AppContext';\n\nimport './DrawerToggleButton.css'\n\nclass DrawerToggleButton extends React.Component {\n    static contextType = AppContext\n    render(){\n        return(\n            <button className=\"toggle-button\" onClick={this.context.drawerToggleButton}>\n                <div className=\"toggle-button_line\"></div>\n                <div className=\"toggle-button_line\"></div>\n                <div className=\"toggle-button_line\"></div>\n            </button>\n    )\n}   }\n\nexport default DrawerToggleButton","import React, {Component} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport {Link} from 'react-router-dom';\n\nimport TokenService from './services/token-service.js';\nimport AppContext from './AppContext';\n\nimport DrawerToggleButton from './DrawerToggleButton'\nimport './Navigation.css'\n\n\nclass Navigation extends Component  {\n    static contextType = AppContext\n    logOutClick = () => {\n      console.log('Logging out')\n      TokenService.clearAuthToken()\n      TokenService.getUserId = (id) => {\n        // console.log(id)\n      }\n  \n      window.location='/'\n    }\n  \n    render(){\n        return( \n           <div className='outer-nav toolbar'>\n                <nav className='toolbar_navigation'>\n                    <div className='toolbar-toggle'>\n                        <DrawerToggleButton click={this.context.drawerToggleButton}/>\n                    </div>\n                        <Link className='nav_logo'to='/'><h2 className=\"logo\">Trippster</h2></Link>\n                        {TokenService.hasAuthToken() ? <div className='spacer'></div> : ''}\n                        {TokenService.hasAuthToken() ? <div className='nav'>\n                        <NavLink className='nav-link' to='/'><h3>Home</h3></NavLink>\n                        <NavLink className='nav-link' to='/visited'><h3>Visited</h3></NavLink>\n                        <NavLink className='nav-link' to='/bucket-list'><h3>Bucket List</h3></NavLink>\n                        <NavLink className='nav-link' to=\"/\" onClick={this.logOutClick}><h3>Log Out</h3></NavLink>\n                    </div> : ''}\n                </nav>\n            </div>\n        )\n   }\n}\n\n\nexport default Navigation","import React from 'react'\nimport config from './config'\nimport Iframe from 'react-iframe'\nimport TokenService from './services/token-service.js';\n\nimport './BucketListPage'\n\n//to add user at later stage\nclass BucketListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      params: {\n        selectCountry: ''\n      },\n      dropDownCountries: [],\n      bucketListCountriesAdded: []\n    };\n  }\n  componentDidMount() {\n    this.populateBucketListCountry()\n    \n    console.log('Stateful component successfully mounted.');\n    //populate dropdown list with countries\n    const url = `${config.API_ENDPOINT}/all`\n    \n\n    console.log(url)\n\n    const options = {\n      method: 'GET',\n      headers: {\n        \"Authorization\": \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }\n\n    //useing the url and paramters above make the api call\n    fetch(url, options)\n\n      // if the api returns data ...\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later.')\n        }\n        // ... convert it to json\n        return res.json()\n      })\n      // use the json api output\n      .then(data => {\n\n        //check if there is meaningfull data\n        console.log(data);\n        // check if there are no results\n        if (data.totalItems === 0) {\n          throw new Error('No user found')\n        }\n        this.setState({\n          dropDownCountries: data\n        })\n      })\n      .catch(err => {\n        this.setState({\n          error: err.message\n        })\n      })\n\n      \n  }\n\n  populateBucketListCountry() {\n      \n    const url = `${config.API_ENDPOINT}/bucket-list/user/${TokenService.getUserId()}`\n    \n\n    console.log(url)\n\n    const options = {\n      method: 'GET',\n      headers: {\n        \"Authorization\": \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }\n\n    //useing the url and paramters above make the api call\n    fetch(url, options)\n\n      // if the api returns data ...\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later.')\n        }\n        // ... convert it to json\n        return res.json()\n      })\n      // use the json api output\n      .then(data => {\n\n        //check if there is meaningfull data\n        console.log(data);\n        // check if there are no results\n        if (data.totalItems === 0) {\n          throw new Error('No user found')\n        }\n        this.setState({\n          bucketListCountriesAdded: data\n        })\n      })\n      .catch(err => {\n        this.setState({\n          error: err.message\n        })\n      })\n  }\n\n  formatQueryParams(params) {\n    const queryItems = Object.keys(params)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n    return queryItems.join('&')\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    //create an object to store the search filters\n    const data = {}\n\n    //get all the data from the form component and populate object with it\n    const formData = new FormData(e.target)\n\n    //for each of the keys in form data populate it with form value\n    for (let value of formData) {\n      data[value[0]] = value[1]\n    }\n    console.log(data)\n    let {\n      selectCountry,\n    } = data\n    let countryId = selectCountry.split('_')[0]\n    let countryNicename = selectCountry.split('_')[1]\n    console.log(countryId,countryNicename)\n    //assigning the object from the form data to params in the state\n    this.setState({\n      params: data\n    })\n\n    //check if the state is populated with the search params data\n    console.log(this.state.params)\n\n////////////////POST REQUEST////////////////////////////\n\n      const newCountry = {\n        id: countryId,\n        user_id: TokenService.getUserId(),   \n        nicename: countryNicename\n      }\n      \n      console.log(newCountry)\n\n  \n      //useing the url and paramters above make the api call\n      fetch(`${config.API_ENDPOINT}/bucket-list`, {\n        method: 'POST',\n        body: JSON.stringify(newCountry),\n        headers: {\n          'content-type': 'application/json'\n        }\n      })\n  \n        // if the api returns data ...\n        .then(res => {\n          if (!res.ok) {\n            throw new Error('Something went wrong, please try again later.')\n          }\n          //  ...convert it to json\n          return res.json()\n        })\n        // use the json api output and assign to a variable\n        .then(data => {\n          this.populateBucketListCountry()\n          console.log(this.state)\n        })\n        .catch(err => {\n          this.setState({\n            error: err.message\n          })\n        })  \n  }\n  ///////////////////////////////////////////////////\n  render() {\n    \n    let showBucketList = ''\n    if (this.state.bucketListCountriesAdded.length !== 0) {\n      showBucketList = this.state.bucketListCountriesAdded.map((country, key) => {\n          // console.log(country.id)\n          let valueOutput = `https://www.google.com/maps/embed/v1/place?key=AIzaSyDfouOPkJqw5K1AKoxQofTjm3jf3dlV4l0&q=${country.nicename}&maptype=roadmap`\n          return (\n              <div key={key}>\n              <h3>{country.nicename}</h3>\n              <Iframe url={valueOutput}\n                      width=\"100%\"\n                      height=\"250px\"\n                      id={key}\n                      className=\"myClassname\"\n                      display=\"initial\"\n                      position=\"relative\"/>\n              </div>\n          )\n      });\n    }\n\n\n    const bucketListCountriesArray = [];\n    if (this.state.bucketListCountriesAdded.length !== 0) {\n      for (let i=0;i<this.state.bucketListCountriesAdded.length;i++) {\n        bucketListCountriesArray.push(this.state.bucketListCountriesAdded[i].nicename)\n      }\n      \n    }\n    console.log(bucketListCountriesArray)\n\n\n    let listOfCountries = ''\n    if(this.state.dropDownCountries.length !== 0 ){\n      listOfCountries = this.state.dropDownCountries.map((country, key) => {\n      // console.log(country.id)\n      let valueOutput = `${country.id}_${country.nicename}`\n      //only display the countries which were not yet added to the bucket list\n      if(!bucketListCountriesArray.includes(country.nicename))\n      {\n        return (\n          <option key={key} name=\"nicename\" value={valueOutput}>{country.nicename}</option>\n          )\n      }\n    });\n    }\n   return (\n    <div className=\"Bucket-list\">\n      {/* {TokenService.getUserId()}  */}\n        <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"countries\">Choose a country:</label>\n            <select name=\"selectCountry\"id=\"countries\" aria-controls=\"countryView\" required>\n                <option value=\"\">None</option>\n                {listOfCountries}\n            </select>\n        <button>Add</button>\n      </form>\n      <section id=\"countryView\" aria-live=\"polite\">\n        <header>\n            {showBucketList}    \n        </header>\n      </section>\n    </div>\n    )\n} }\nexport default BucketListPage","import React from 'react'\nimport config from './config'\nimport Iframe from 'react-iframe'\nimport AuthApiService from './services/auth-api-service';\nimport TokenService from './services/token-service.js';\n\nimport './VisitedPage.css'\n\n//to add user at a later stage\nclass VisitedPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      params: {\n        selectCountry: ''\n      },\n      dropDownCountries: [],\n      visitedCountriesAdded: []\n    };\n  }\n  \n  componentDidMount() {\n    this.populatevisitedCountry()\n    console.log('Stateful component successfully mounted.');\n    const url = `${config.API_ENDPOINT}/all`\n    \n\n    console.log(url)\n\n    const options = {\n      method: 'GET',\n      headers: {\n        \"Authorization\": \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }\n\n    //useing the url and paramters above make the api call\n    fetch(url, options)\n\n      // if the api returns data ...\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later.')\n        }\n        // ... convert it to json\n        return res.json()\n      })\n      // use the json api output\n      .then(data => {\n\n        //check if there is meaningfull data\n        console.log(data);\n        // check if there are no results\n        if (data.totalItems === 0) {\n          throw new Error('No user found')\n        }\n        this.setState({\n          dropDownCountries: data\n        })\n      })\n      .catch(err => {\n        this.setState({\n          error: err.message\n        })\n      })\n  }\n\n  populatevisitedCountry() {\n      \n    const url = `${config.API_ENDPOINT}/visited/user/${TokenService.getUserId()}`\n    \n\n    console.log(url)\n\n    const options = {\n      method: 'GET',\n      headers: {\n        \"Authorization\": \"\",\n        \"Content-Type\": \"application/json\"\n      }\n    }\n\n    //useing the url and paramters above make the api call\n    fetch(url, options)\n\n      // if the api returns data ...\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later.')\n        }\n        // ... convert it to json\n        return res.json()\n      })\n      // use the json api output\n      .then(data => {\n\n        //check if there is meaningfull data\n        console.log(data);\n        // check if there are no results\n        if (data.totalItems === 0) {\n          throw new Error('No user found')\n        }\n        this.setState({\n          visitedCountriesAdded: data\n        })\n      })\n      .catch(err => {\n        this.setState({\n          error: err.message\n        })\n      })\n  }\n  formatQueryParams(params) {\n    const queryItems = Object.keys(params)\n      .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n    return queryItems.join('&')\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    //create an object to store the search filters\n    const data = {}\n\n    //get all the from data from the form component\n    const formData = new FormData(e.target)\n\n    //for each of the keys in form data populate it with form value\n    for (let value of formData) {\n      data[value[0]] = value[1]\n    }\n    console.log(data)\n    let {\n      selectCountry,\n    } = data\n\n    let countryId = selectCountry.split('_')[0]\n    let countryNicename = selectCountry.split('_')[1]\n    console.log(countryId,countryNicename)\n   \n    //assigning the object from the form data to params in the state\n    this.setState({\n      params: data\n    })\n\n    //check if the state is populated with the search params data\n    console.log(this.state.params)\n\n    \n    ////////////////POST REQUEST////////////////////////////\n\n    const newCountry = {\n      id: countryId,\n      user_id: TokenService.getUserId(), \n      nicename: countryNicename\n    }\n    \n    console.log(newCountry)\n\n\n    //useing the url and paramters above make the api call\n    fetch(`${config.API_ENDPOINT}/visited`, {\n      method: 'POST',\n      body: JSON.stringify(newCountry),\n      headers: {\n        'content-type': 'application/json'\n      }\n    })\n\n      // if the api returns data ...\n      .then(res => {\n        if (!res.ok) {\n          throw new Error('Something went wrong, please try again later.')\n        }\n        // ... convert it to json\n        return res.json()\n      })\n      // use the json api output and assign to a variable\n      .then(data => {\n        this.populatevisitedCountry()\n        console.log(this.state)\n      })\n      .catch(err => {\n        this.setState({\n          error: err.message\n        })\n      }) \n  }\n  ///////////////////////////////////////////////////////\n  render() {\n    let showVisitedList = ''\n    if (this.state.visitedCountriesAdded.length !== 0) {\n      showVisitedList = this.state.visitedCountriesAdded.map((country, key) => {\n          // console.log(country.id)\n          let valueOutput = `https://www.google.com/maps/embed/v1/place?key=AIzaSyDfouOPkJqw5K1AKoxQofTjm3jf3dlV4l0&q=${country.nicename}&maptype=roadmap`\n          return (\n              <div key={key}>\n              <h3>{country.nicename}</h3>\n              <Iframe url={valueOutput}\n                      width=\"100%\"\n                      height=\"150px\"\n                      id={key}\n                      className=\"myClassname\"\n                      display=\"initial\"\n                      position=\"relative\"/>\n              </div>\n          )\n      });\n    }\n\n\n    const visitedCountriesArray = [];\n    if (this.state.visitedCountriesAdded.length !== 0) {\n      for (let i=0;i<this.state.visitedCountriesAdded.length;i++) {\n        visitedCountriesArray.push(this.state.visitedCountriesAdded[i].nicename)\n      }\n      \n    }\n    console.log(visitedCountriesArray)\n\n\n    let listOfCountries = ''\n    if(this.state.dropDownCountries.length !== 0 ){\n      listOfCountries = this.state.dropDownCountries.map((country, key) => {\n      // console.log(country.id)\n      let valueOutput = `${country.id}_${country.nicename}`\n      //only display the countries which were not yet added to the bucket list\n      if(!visitedCountriesArray.includes(country.nicename))\n      {\n        return (\n          <option key={key} name=\"nicename\" value={valueOutput}>{country.nicename}</option>\n          )\n      }\n    });\n    }\n\n   return (\n    <div className=\"Visited-list\">\n      {/* {TokenService.getUserId()}  */}\n        <form onSubmit={this.handleSubmit}>\n        <label htmlFor=\"countries\">Choose a country:</label>\n            <select name=\"selectCountry\" aria-controls=\"countryView\" id=\"countries\" required>\n                <option value=\"\">None</option>\n                {listOfCountries}\n            </select>\n        <button>Add</button>\n      </form>\n      <section id=\"countryView\" aria-live=\"polite\">\n        <header>\n            {showVisitedList}\n        </header>\n      </section>\n    </div>\n    )\n} }\nexport default VisitedPage","import React, {Component} from 'react'\nimport {NavLink} from 'react-router-dom'\n\nimport TokenService from './services/token-service.js';\n\nimport './SideDrawer.css'\n\nclass SideDrawer extends Component {\n    logOutClick = () => {\n        console.log('Logging out')\n        TokenService.clearAuthToken()\n        TokenService.getUserId = (id) => {\n          // console.log(id)\n        }\n    \n        window.location='/'\n      }\n    render() {\n        let drawerClasses = 'side-drawer';\n    if (this.props.show) {\n        drawerClasses = 'side-drawer open'\n    }\n    return(\n    <nav className={drawerClasses}>\n        <div className='menu-list'>\n        <NavLink className='nav-link' to='/'><h3>Home</h3></NavLink>\n        <NavLink className='nav-link' to='/visited'><h3>Visited</h3></NavLink>\n        <NavLink className='nav-link' to='/bucket-list'><h3>Bucket List</h3></NavLink>\n        <NavLink className='nav-link' to=\"/\" onClick={this.logOutClick}><h3>Log Out</h3></NavLink>\n        </div>\n    </nav>\n    )\n    }\n}\nexport default SideDrawer\n","import React from 'react'\n\nimport './Backdrop.css'\n\nconst Backdrop = props => (\n    <div className=\"backdrop\" onClick = {props.click}>\n    </div>\n)\n\nexport default Backdrop","import React from 'react';\nimport { Route, Switch, Redirect} from 'react-router-dom'\n\n// import config from './config'\nimport './App.css';\nimport AppContext from './AppContext';\nimport TokenService from './services/token-service.js';\n\nimport NotFoundPage from './NotFoundPage'\nimport LandingPage from './LandingPage'\nimport Navigation from './Navigation'\nimport BucketListPage from './BucketListPage'\nimport VisitedPage from './VisitedPage'\nimport SideDrawer from './SideDrawer'\nimport Backdrop from './Backdrop'\n\n\nexport default class App extends React.Component {\n  \n  state = {\n    sideDrawerOpen: false,\n  }\n  /////needed//////\n  drawerToggleButton = () => {\n    this.setState((prevState) => {\n      return {sideDrawerOpen: !prevState.sideDrawerOpen}\n    })\n  }\n\n  backdropClickHandler = () => {\n    this.setState({sideDrawerOpen: false})\n  }\n\n\nrender() {\n  // const {store} = this.state\n  // console.log(`these are notes and folders ${this.state.notes}${this.state.folders}`)\n  const contextValue = {\n    drawerToggleButton: this.drawerToggleButton, ///needed\n  }\n  console.log(contextValue)\n\n\n  let backdrop;\n\n  if (this.state.sideDrawerOpen) {\n    backdrop = <Backdrop click={this.backdropClickHandler}/>\n  }\n\n  return (\n    <AppContext.Provider value={contextValue}>\n    <div style={{height:'100%'}} className=\"App\">\n      <Navigation />\n      <SideDrawer show={this.state.sideDrawerOpen}/>\n      {backdrop}\n      <main className='Main-view'>\n        <Switch>\n          <Route exact path='/' render={() => {\n            return <LandingPage />\n          }}/>\n          <Route path='/visited' render={() => {\n            return (TokenService.hasAuthToken()\n              ? <VisitedPage />\n              : <Redirect to={{pathname: '/'}} />)\n          }}/>\n          <Route path='/bucket-list' render={() => {\n              return (TokenService.hasAuthToken()\n              ? <BucketListPage />\n              : <Redirect to={{pathname: '/'}} />)\n          }} />\n          />\n         <Route component={NotFoundPage} />\n        </Switch>\n      </main>\n    </div>\n    </AppContext.Provider>\n  );\n }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}